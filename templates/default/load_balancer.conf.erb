upstream <%= @resource.application.name %>-upstream {
	<% unless @application_socket.empty? -%>
		<% [ @application_socket ].flatten.each do |socket_name| -%>
	server unix:<%= socket_name %> fail_timeout=0;
		<% end -%>
	<% end -%>
	<% @hosts.each do |node| %>
  server <%= node %>:<%= @resource.application_port %>;
  <% end %>
}

<% if @resource.ssl -%>
ssl_certificate <%= @resource.ssl_certificate %>;
ssl_certificate_key <%= @resource.ssl_certificate_key %>;
<% end -%>

server {
	listen <%= @resource.port %>;
	<% if @resource.ssl %>
	listen 443 ssl;
	<% end -%>
	server_name <%= @resource.server_name.is_a?(Array) ? @resource.server_name.join(' ') : @resource.server_name %>;

	access_log <%= node[:nginx][:log_dir] %>/<%= @resource.server_name.is_a?(Array) ? @resource.server_name.first : @resource.server_name %>.log;
	root <%= @resource.path %>/current/public;
	index index.html;

	<% @resource.static_files.each do |url, path| -%>
	location <%= url %> {
		alias <%= path %>;
	}
	<% end -%>

	# set expiration for static assets
	location ~* \.(ico|jpg|gif|png|css|js|swf)$ {
		try_files $uri @<%= @resource.application.name %>-backend;
		expires max;
	}
	location / {
		try_files $uri @<%= @resource.application.name %>-backend;
	}

	location @<%= @resource.application.name %>-backend {
		proxy_redirect     off;
		proxy_set_header   Host             $host;
		proxy_set_header   X-Real-IP        $remote_addr;
		proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
		# https://newrelic.com/docs/features/request-queuing-and-tracking-front-end-time
		proxy_set_header   X-Request-Start  "t=${msec}000"; # for NewRelic

		proxy_pass http://<%= @resource.application.name %>-upstream;
	}

	# if 502 Bad Gateway or 504 Gateway Timeout show the 500.html page
	# if 503 Service Unavailable show the maintenance.html page
	error_page 504 502 /500.html;
	error_page 503 @maintenance;

	location @maintenance {
		rewrite ^(.*)$ /maintenance.html break;
	}
	if (-f $document_root/maintenance.html) {
		return 503;
	}
}
